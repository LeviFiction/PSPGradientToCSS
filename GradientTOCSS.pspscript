from __future__ import generators
from JascApp import *
import struct, sys
import os
import math
# __future__ import generators is necessary to use the yield command and produce a generator in PSP8
# generators are used to re-create the os.walk() function in PSP8

def ScriptProperties():
    return {
        'Author': u'LeviFiction',
        'Copyright': u'2017',
        'Description': u'Convert Gradient to CSS or SVG notation',
        'Host': u'PaintShop Pro',
        'Host Version': u'8.00'
        }
        
def Do(Environment):
    #grab preliminary information
    #1)Image must exist
    #2)A gradient must be selected

    material = App.Do(Environment, 'GetMaterial',{'GeneralSettings':{'ExecutionMode':App.Constants.ExecutionMode.Silent}})['Gradient']
    
    #If we don't have a gradient, leave the script
    #Otherwise grab the color and opacity points
    if material == None:
        return
    elif material['ColorStops'] != None:
        colorStops = material['ColorStops']
        #kind of stupid, PSP uses "Midpoint" for color stops and "MidPoint" for opacity stops
        #So that I wouldn't have to rewrite my code I just changed "Midpoint" to "MidPoint"
        for stop in colorStops:
            stop['MidPoint'] = stop.pop('Midpoint')
        opacityStops = material['TransparencyStops']
    elif material['Name'] != None:
        name = findGradient(Environment, material['Name'])
        reader = Gradient_Reader(name)
        colorStops = reader.getColorStops()
        opacityStops = reader.getTransStops()
    else:
        return
    #Make sure stops are uniform, definate beginning, end. And ensure mid-points are all 50%
    colorStops = ParseStops(colorStops, 0)
    opacityStops = ParseStops(opacityStops, 1)
    
    #Make sure each Color and Transparency stop has a matching cousin
    colorStops, opacityStops = PrepareMerge(colorStops, opacityStops)
    
    #Combine the stops into one stop list
    final = merge(colorStops, opacityStops)
    if final == None:
        print("Error processing Gradient")
        return
    print(toSVG(removeSpaces(material['Name']), final, material['Angle'], material['Invert'], material['GradientType'], material['CenterPoint'], material['FocalPoint']))
    print(toCSS(removeSpaces(material['Name']), final, material['Angle'], material['Invert'], material['GradientType'],material['CenterPoint']))
class Gradient_Reader:
    def __init__(self, filename):
        self._header = ">4sHH"
        self._namelen = ">B"
        self._namestring = ">{}p"
        self._numstops = ">H"
        self._colorStop = ">IIH6BHH"
        self._transStop = ">IIH"
        self._end = ">6B"
        self._offset = 0
        self._signature = ""
        self._version = ""
        self._numGradients = ""
        self._cStops = []
        self._tStops = []
        self._name = ""
        self.filename = filename
        #read entire file
        file = open(filename, 'rb')
        buff = file.read()
        file.close()
        #Grab header
        self._signature, self._version, self._numGradients = struct.unpack(self._header, buff[self._offset:self._offset + struct.calcsize(self._header)])
        self._offset = struct.calcsize(self._header)
        #Grab Name
        var = struct.unpack(self._namelen, buff[self._offset:self._offset+1])[0]+1
        self._name = struct.unpack(">"+str(var)+"p", buff[self._offset:self._offset + struct.calcsize(">"+str(var)+"p")])[0].replace('\x00' , '')
        self._offset = self._offset + struct.calcsize(">"+str(var)+"p")
        #Grab Color Stops
        var = struct.unpack(self._numstops, buff[self._offset:self._offset + struct.calcsize(self._numstops)])[0]
        self._offset = self._offset + struct.calcsize(self._numstops)
        for i in range(var):
            #print struct.unpack(self._colorStop, buff[self._offset: self._offset+struct.calcsize(self._colorStop)])
            loc,mid,model, R,R, G,G, B,B, A, type = struct.unpack(self._colorStop, buff[self._offset: self._offset+struct.calcsize(self._colorStop)])
            self._cStops.append(cStop(loc, mid, model, [R,G,B],type))
            self._offset = self._offset + struct.calcsize(self._colorStop)
        #Grab Transparency Stops
        var = struct.unpack(self._numstops, buff[self._offset:self._offset + struct.calcsize(self._numstops)])[0]
        self._offset = self._offset + struct.calcsize(self._numstops)
        for i in range(var):
            loc,mid,opacity = struct.unpack(self._transStop, buff[self._offset: self._offset+struct.calcsize(self._transStop)])
            self._tStops.append(tStop(loc, mid, opacity))
            self._offset = self._offset + struct.calcsize(self._transStop)
        #finish end of file
        self._offset = self._offset + struct.calcsize(self._end)
        
    def getColorStops(self):
        stops = []
        for i in self._cStops:
            stops.append({
                'Color': i.getColor(),
                'Location': i.getLocation(),
                'MidPoint': i.getMidpoint()})
        return stops

    def getTransStops(self):
        stops = []
        for i in self._tStops:
            stops.append({
                'Level': i.getOpacity(),
                'Location': i.getLocation(),
                'MidPoint': i.getMidpoint()})
        return stops
        
    def getMaterial(self):
        return {
        'IsPrimary': True, 
        'NewMaterial': {
            'Color': None, 
            'Pattern': None, 
            'Gradient': {
                'Name': self._name, 
                'ColorStops': self.getColorStops(), 
                'TransparencyStops': self.getTransStops(), 
                }, 
            'Texture': None, 
            'Art': None
            }
        }
        
class cStop:
    _offset = 0
    _midpoint = 0
    _model = 0
    _colors = []
    _type = 0
    
    def __init__(self, offset, midpoint, model, colors, type):
        self._offset = offset
        self._midpoint = midpoint
        self._model = model
        self._colors = colors
        self._type = type

    def __str__(self):
        return self._name
        
    def getLocation(self):
        return round((self._offset/4096.0),2)
    
    def getMidpoint(self):
        return round(self._midpoint/100.0,2)

    def getColor(self):
        return (self._colors[0],self._colors[1],self._colors[2])
        
class tStop:
    _offset = 0
    _midpoint = 0
    _opacity = 0
    
    def __init__(self, offset, midpoint, opacity):
        self._offset = offset
        self._midpoint = midpoint
        self._opacity = opacity
        
    def getLocation(self):
        return round((self._offset/4096.0),2)
    
    def getMidpoint(self):
        return round(self._midpoint/100.0,2)
    
    def getOpacity(self):
        return round(self._opacity/255.0,2) * 100
        
def enumerate(seq):
    return zip(xrange(len(seq)), seq)

def findGradient(Environment, name):
    GradientLocations = App.Do(Environment, 'ReturnFileLocations')['Gradients']
    for loc in GradientLocations:
        for root, dirs, files in walk(loc):
            path = root#.split(os.sep)
            for file in files:
                if file.rfind(name) > -1:
                    return os.path.join(path,file)
                    
def walk(top):
    try:
        names = os.listdir(top)
    except:
        pass

    dirs, nondirs = [], []
    for name in names:
        if os.path.isdir(os.path.join(top, name)):
            dirs.append(name)
        else:
            nondirs.append(name)

    yield (top, dirs, nondirs)
    
def ParseStops(stops, type):
    parsedStops = []
    #If the starting point is not at zero, add a point that starts at zero
    if stops[0]['Location'] > 0:
        newstart = stops[0].copy()
        newstart['Location'] = 0
        parsedStops.append(newstart)
    #if the ending point is not at 100%, add a point that ends at 100
    if stops[-1]['Location'] < 1:
        newend = stops[-1].copy()
        newend['Location'] = 1.0
        stops.append(newend)
    #Next go through all stops, if a stop has a midpoint at any position other than 50%
    #add a color point at the current midpoint.
    for i,stop in enumerate(stops):
        parsedStops.append(stop)
        if int(stop['MidPoint'] * 100.0) != 50:
            if i == len(stops)-1:
                continue
            location = (stops[i+1]['Location'] - stop['Location'] ) * stop['MidPoint'] + stop['Location']
            if type == 0:
                r = ((stops[i+1]['Color'][0] - stop['Color'][0])/2) + stop['Color'][0]
                g = ((stops[i+1]['Color'][1] - stop['Color'][1])/2) + stop['Color'][1]
                b = ((stops[i+1]['Color'][2] - stop['Color'][2])/2) + stop['Color'][2]
                parsedStops.append({'Color':(r,g,b),'Location':location,'MidPoint':.5})
            else:
                l = ((stops[i+1]['Level'] - stop['Level'])/2) + stop['Level']
                parsedStops.append({'Level':l,'Location':location,'MidPoint':.5})
                
    return parsedStops

def rgb_stop_interp(rs0, rs1, z):
  z = z * 1.0
  M =(z - rs0['Location'])/(rs1['Location'] - rs0['Location'])
  rs = {}
  rs['Location'] = z
  rsr = rs0['Color'][0] + M*(rs1['Color'][0] - rs0['Color'][0])
  rsg = rs0['Color'][1] + M*(rs1['Color'][1] - rs0['Color'][1])
  rsb = rs0['Color'][2] + M*(rs1['Color'][2] - rs0['Color'][2])
  rs['Color'] = (round(rsr),round(rsg),round(rsb))
  rs['MidPoint'] = .5
  return rs
  
def op_stop_interp(os0,os1,z):
  z = z * 1.0
  M =(z - os0['Location'])/(os1['Location'] - os0['Location'])
  os = {}
  os['Location'] = z
  os['Level'] = os0['Level'] + M*(os1['Level'] - os0['Level'])
  os['MidPoint'] = 0.5
  return os

def PrepareMerge(cstops, tstops):
    tstops = PrepareStops(cstops, tstops, op_stop_interp)
    cstops = PrepareStops(tstops, cstops, rgb_stop_interp)
    return cstops, tstops
    
def PrepareStops(src, dest, func):
    for x in src:
        if x['Location'] not in [y['Location'] for y in dest]:
            for i,y in enumerate(dest):
                if y['Location'] < x['Location']:
                    y0 = y
                else:
                    y1 = y
                    break
            dest.insert(i,func(y0, y1, x['Location']))
    return dest
    
def merge(cstops, tstops):
    if len(cstops) != len(tstops):
        return
    mergeStops = []
    for i in range(len(cstops)):
        mergeStops.append({'Color':cstops[i]['Color'], 'Level':tstops[i]['Level'], 'Location':cstops[i]['Location']})
    return mergeStops

def toRadians(degrees):
	return degrees / 180 * math.pi

def pointOfAngle(a):
    return {'x':math.cos(a),
            'y':math.sin(a)}

def degreesToRadians(d):
    return ((d * math.pi) / 180)

def angleToPoints(angle):
    eps = math.pow(2, -52)
    angle = (angle % 360)
    startPoint = pointOfAngle(degreesToRadians(90+angle))
    endPoint = pointOfAngle(degreesToRadians(270 + angle))

    # if you want negative values you can remove the following checks
    # but most likely it will produce undesired results
    if startPoint['x'] <= 0 or abs(startPoint['x']) <= eps:
        startPoint['x'] = 0

    if startPoint['y'] <= 0 or abs(startPoint['y']) <= eps:
        startPoint['y'] = 0

    if endPoint['x'] <= 0 or abs(endPoint['x']) <= eps:
        endPoint['x'] = 0

    if endPoint['y'] <= 0 or abs(endPoint['y']) <= eps:
        endPoint['y'] = 0
    return (round(startPoint['x'],2), round(startPoint['y'],2), round(endPoint['x'],2), round(endPoint['y'],2))

def toSVG(name, stops, angle, invert, type, centerpoint=(0.5,0.5), focalpoint=(0.5,0.5)):
    if invert:
        newstops = []
        count = len(stops) -1
        for i in range(count+1):
            newstops.append({'Color':stops[i]['Color'], 'Level':stops[i]['Level'], 'Location': stops[count-i]['Location']})
        stops = newstops
        stops.reverse()
    svg = ""
    if type == 0:
        anglePoints = angleToPoints(angle)
        x1 = anglePoints[0]
        y1 = anglePoints[1]
        x2 = anglePoints[2]
        y2 = anglePoints[3]
        svg = '<linearGradient id="'+name+'" x1="'+str(x1)+'" y1="'+str(y1)+'" x2="'+str(x2)+'" y2="'+str(y2)+'">\n'
        for x in stops:
            svg = svg + '<stop offset="'+str(round(x['Location']*100.0,2))+'%" stop-color="rgb'+str(x['Color'])+'" stop-opacity="'+str(round(x['Level']/100.0,4))+'"/>\n'
        svg = svg +  '</linearGradient>\n'
    else:
        if focalpoint == None:
            focalpoint = (0.5, 0.5)
        svg = '<radialGradient id="'+name+'"'
        svg = svg + ' cx="'+str(centerpoint[0]*100)+'%" cy="'+str(centerpoint[1]*100)+'%"' 
        svg = svg + ' fx="'+str(focalpoint[0]*100)+'%" fy="' + str(focalpoint[1]*100)+'%"> \n'
        for x in stops:
            svg = svg + '<stop offset="'+str(round(x['Location']*100.0,2))+'%" stop-color="rgb'+str(x['Color'])+'" stop-opacity="'+str(round(x['Level']/100.0,4))+'"/>\n'
        svg = svg +  '</radialGradient>\n'        
    return svg
    
def toCSS(name,stops,angle,invert, type, centerpoint):
    if invert:
        newstops = []
        count = len(stops) -1
        for i in range(len(stops)-1):
            newstops.append({'Color':stops[i]['Color'], 'Level':stops[i]['Level'], 'Location': stops[count-i]['Location']})
        stops = newstops
        stops.reverse()
    css = ""
    if type == 0:
        css = css + "background: rgb"+ str(stops[0]['Color'])+";\n"
        css = css + "background: -moz-linear-gradient("+str(angle)+"deg" + cssParams(stops)
        css = css + "background: -webkit-linear-gradient("+str(angle)+"deg" + cssParams(stops)
        css = css + "background: -o-linear-gradient("+str(angle)+"deg" + cssParams(stops)
        css = css + "background: linear-gradient("+str(angle)+"deg" + cssParams(stops)
    else:
        css = css + "background: -moz-radial-gradient("+str(centerpoint[0]*100)+"% "+ str(centerpoint[1]*100)+"% " + cssParams(stops)
        css = css + "background: -webkit-radial-gradient("+str(centerpoint[0]*100)+"% "+ str(centerpoint[1]*100)+"% " + cssParams(stops)
        css = css + "background: -o-radial-gradient("+str(centerpoint[0]*100)+"% "+ str(centerpoint[1]*100)+"% " + cssParams(stops) 
        css = css + "background: radial-gradient("+str(centerpoint[0]*100)+"% "+ str(centerpoint[1]*100)+"% " + cssParams(stops)    
    return css
    
def cssParams(stops):
    css = ""
    for x in stops:
        rgba = (x['Color'][0], x['Color'][1],x['Color'][2],round(x['Level']/100.0,4))
        css = css + ", rgba"+str(rgba)+" "+str(x['Location']*100)+"%"
    css = css + "); \n"
    return css
    
def removeSpaces(strin, replchar = "_"):
    return strin.replace(" ", replchar)